// <auto-generated />
using System;
using System.Collections.Generic;
using AggregateAndMicroService.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AggregateAndMicroService.Migrations
{
    [DbContext(typeof(LearningContext))]
    [Migration("20240416091131_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AggregateAndMicroService.Aggregates.Course.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ComplexProperty<Dictionary<string, object>>("StageCount", "AggregateAndMicroService.Aggregates.Course.Course.StageCount#StageCount", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Value")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasDefaultValue(0)
                                .HasColumnName("StageCount");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Status", "AggregateAndMicroService.Aggregates.Course.Course.Status#CourseStatus", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Value")
                                .HasColumnType("integer")
                                .HasColumnName("Status");
                        });

                    b.HasKey("Id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("AggregateAndMicroService.Aggregates.Course.CourseCompleting", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.ComplexProperty<Dictionary<string, object>>("Progress", "AggregateAndMicroService.Aggregates.Course.CourseCompleting.Progress#Progress", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Value")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasDefaultValue(0)
                                .HasColumnName("Progress");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("StagesCountData", "AggregateAndMicroService.Aggregates.Course.CourseCompleting.StagesCountData#StagesCountData", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("CompletedStages")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasDefaultValue(0)
                                .HasColumnName("CompletedStages");

                            b1.Property<int>("TotalStages")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasDefaultValue(0)
                                .HasColumnName("TotalStages");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Status", "AggregateAndMicroService.Aggregates.Course.CourseCompleting.Status#CompleteStatus", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Value")
                                .HasColumnType("integer")
                                .HasColumnName("Status");
                        });

                    b.HasKey("Id");

                    b.ToTable("CourseCompleting");
                });

            modelBuilder.Entity("AggregateAndMicroService.Aggregates.Course.Stage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("PreviousValue")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ComplexProperty<Dictionary<string, object>>("Duration", "AggregateAndMicroService.Aggregates.Course.Stage.Duration#StageDuration", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<TimeSpan>("Value")
                                .HasColumnType("interval")
                                .HasColumnName("Duration");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Type", "AggregateAndMicroService.Aggregates.Course.Stage.Type#StageType", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Value")
                                .HasColumnType("integer")
                                .HasColumnName("Type");
                        });

                    b.HasKey("Id");

                    b.HasIndex("PreviousValue");

                    b.ToTable("Stage");
                });

            modelBuilder.Entity("AggregateAndMicroService.Aggregates.Course.StageCourseCompleting", b =>
                {
                    b.Property<Guid>("CourseCompletingId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StageId")
                        .HasColumnType("uuid");

                    b.ComplexProperty<Dictionary<string, object>>("StageProgress", "AggregateAndMicroService.Aggregates.Course.StageCourseCompleting.StageProgress#StageProgress", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Value")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasDefaultValue(0)
                                .HasColumnName("StageProgress");
                        });

                    b.HasKey("CourseCompletingId", "StageId");

                    b.ToTable("StageCourseCompleting");
                });

            modelBuilder.Entity("AggregateAndMicroService.Aggregates.Course.StageId", b =>
                {
                    b.Property<Guid>("Value")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Value");

                    b.ToTable("StageId");
                });

            modelBuilder.Entity("AggregateAndMicroService.Aggregates.User.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AggregateAndMicroService.Aggregates.Course.Stage", b =>
                {
                    b.HasOne("AggregateAndMicroService.Aggregates.Course.StageId", "Previous")
                        .WithMany()
                        .HasForeignKey("PreviousValue");

                    b.Navigation("Previous");
                });
#pragma warning restore 612, 618
        }
    }
}
